module OpenGames.Examples.Governance.Irrigation where

import           Control.Arrow (Kleisli(..))
import           Numeric.Probability.Distribution

import           OpenGames.Examples.Governance.Monitoring (FarmerMove (..), MonitorMove (..))

import           OpenGames.Engine.OpenGamesClass
import           OpenGames.Engine.OpticClass
import           OpenGames.Engine.StatefulBayesian
import           OpenGames.Preprocessor.AbstractSyntax

farmerWater :: Double -> FarmerMove -> Double
farmerWater startLevel Crack = if startLevel >= 2 then 2 else startLevel
farmerWater startLevel Flood = if startLevel >= 5 then 5 else startLevel

irrigationStepSrc = Block ["name", "startLevel"] []
  [Line Nothing ["name", "[Crack, Flood]", "()"] [] "dependentDecision" ["farmerMove"] ["farmerWater startLevel farmerMove"]]
  ["startLevel - farmerWater startLevel farmerMove"] []

irrigationStep = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(name, startLevel, farmerMove) -> ())) >>> (reindex (\a1 -> a1) (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(name, startLevel) -> ((name, startLevel), (name, [Crack, Flood], ()))) (\((name, startLevel, farmerMove), ()) -> (name, startLevel, farmerMove))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((name, startLevel), farmerMove) -> (name, startLevel, farmerMove)) (\(name, startLevel, farmerMove) -> ((name, startLevel, farmerMove), farmerWater startLevel farmerMove)))))))) >>> (fromLens (\(name, startLevel, farmerMove) -> startLevel - farmerWater startLevel farmerMove) (curry (\((name, startLevel, farmerMove), ()) -> (name, startLevel, farmerMove)))))

irrigationNoMonitoringSrc = Block [] []
  [Line Nothing ["\"farmer1\"", "10"] [] "irrigationStep" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1"] [] "irrigationStep" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2"] [] "irrigationStep" ["levelAfter3"] []]
  [] []

irrigationNoMonitoring = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(levelAfter1, levelAfter2, levelAfter3) -> ())) >>> (reindex (\(a1, a2, a3) -> ((a1, a2), a3)) (((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("farmer1", 10))) (\((levelAfter1, levelAfter2, levelAfter3), ()) -> (levelAfter1, levelAfter2, levelAfter3))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStep)))))) >>> (fromFunctions (\((), levelAfter1) -> levelAfter1) (\(levelAfter1, levelAfter2, levelAfter3) -> ((levelAfter1, levelAfter2, levelAfter3), ()))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\levelAfter1 -> (levelAfter1, ("farmer2", levelAfter1))) (\((levelAfter1, levelAfter2, levelAfter3), ()) -> (levelAfter1, levelAfter2, levelAfter3))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStep)))))) >>> (fromFunctions (\(levelAfter1, levelAfter2) -> (levelAfter1, levelAfter2)) (\(levelAfter1, levelAfter2, levelAfter3) -> ((levelAfter1, levelAfter2, levelAfter3), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(levelAfter1, levelAfter2) -> ((levelAfter1, levelAfter2), ("farmer3", levelAfter2))) (\((levelAfter1, levelAfter2, levelAfter3), ()) -> (levelAfter1, levelAfter2, levelAfter3))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStep)))))) >>> (fromFunctions (\((levelAfter1, levelAfter2), levelAfter3) -> (levelAfter1, levelAfter2, levelAfter3)) (\(levelAfter1, levelAfter2, levelAfter3) -> ((levelAfter1, levelAfter2, levelAfter3), ()))))))))) >>> (fromLens (\(levelAfter1, levelAfter2, levelAfter3) -> ()) (curry (\((levelAfter1, levelAfter2, levelAfter3), ()) -> (levelAfter1, levelAfter2, levelAfter3)))))

irrigationMonitoringSrc = Block [] []
  [Line Nothing [] [] "irrigationNoMonitoring" [] [],
   Line Nothing ["\"farmer3\"", "[Work, Shirk]"] [] "dependentDecision" ["monitorDecision"] ["if monitorDecision == Work then 1 else 0"]]
  [] []

assignWater :: (Double, FarmerMove, MonitorMove) -> (Double, Double)
assignWater (startLevel, farmerMove, monitorWorks)
  = if monitorWorks == Work then ((1 - monitorPayRate)*w, monitorPayRate*w) else (w, 0)
    where w = farmerWater startLevel farmerMove

{-
first output: to farmer
second output: to monitor (*)
third output: to downstream
(*) Important subtle point: paying the monitor a fixed share of all yields if they work is
not necessarily accurate to the institution observed in field work. It is a fix
because we are modelling as a 1-shot game (partly due to limitation of the backend),
and otherwise the monitor would always have incentive to unilaterally shirk.

assignWater2: punishment goes downstream
assignWater3: punishment goes direct to monitor
-}
assignWater2 :: (Double, FarmerMove, MonitorMove) -> (Double, Double, Double)
assignWater2 (startLevel, farmerMove, monitorWorks)
  = case (farmerMove, monitorWorks) of
      (Crack, Work) -> ((1 - monitorPayRate)*w, monitorPayRate*w, startLevel - w)
      (Flood, Work) -> ((1 - monitorPayRate - punishmentRate)*w, monitorPayRate*w, startLevel - (1 - punishmentRate)*w)
      (_, Shirk) -> (w, 0, startLevel - w)
  where w = farmerWater startLevel farmerMove

assignWater3 :: (Double, FarmerMove, MonitorMove) -> (Double, Double, Double)
assignWater3 (startLevel, farmerMove, monitorWorks)
  = case (farmerMove, monitorWorks) of
      (Crack, Work) -> ((1 - monitorPayRate)*w, monitorPayRate*w, startLevel - w)
      (Flood, Work) -> ((1 - monitorPayRate - punishmentRate)*w, (monitorPayRate + punishmentRate)*w, startLevel - w)
      (_, Shirk) -> (w, 0, startLevel - w)
  where w = farmerWater startLevel farmerMove

monitorPayRate :: Double
monitorPayRate = 0.2

punishmentRate :: Double
punishmentRate = 0.7

irrigationStepMonitorSrc = Block ["name", "startLevel", "monitorWorks"] ["monitorWater"]
  [Line Nothing ["name", "[Crack, Flood]", "()"] [] "dependentDecision" ["farmerMove"] ["farmerWater"],
   Line Nothing ["startLevel", "farmerMove", "monitorWorks"] ["()"] "fromFunctions assignWater id" ["farmerWater", "monitorWater"] ["()"]]
  ["startLevel - farmerWater - monitorWater"] []

irrigationStepMonitor = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, ()) -> monitorWater)) >>> (reindex (\(a1, a2) -> (a1, a2)) ((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(name, startLevel, monitorWorks) -> ((name, startLevel, monitorWorks), (name, [Crack, Flood], ()))) (\((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, ()), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, ()))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((name, startLevel, monitorWorks), farmerMove) -> (name, startLevel, monitorWorks, farmerMove)) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, ()) -> ((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, ()), farmerWater))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(name, startLevel, monitorWorks, farmerMove) -> ((name, startLevel, monitorWorks, farmerMove), (startLevel, farmerMove, monitorWorks))) (\((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, ()))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((fromFunctions assignWater id)))))) >>> (fromFunctions (\((name, startLevel, monitorWorks, farmerMove), (farmerWater, monitorWater)) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater)) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater) -> ((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater), ()))))))))) >>> (fromLens (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater) -> startLevel - farmerWater - monitorWater) (curry (\((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater)))))

irrigationNoMonitoring2Src = Block [] []
  [Line Nothing ["\"farmer1\"", "10", "Shirk"] ["dummy1"] "irrigationStepMonitor" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "Shirk"] ["dummy2"] "irrigationStepMonitor" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "Shirk"] ["dummy3"] "irrigationStepMonitor" ["levelAfter3"] []]
  [] []

irrigationNoMonitoring2 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(levelAfter1, levelAfter2, levelAfter3, dummy3, dummy2, dummy1) -> ())) >>> (reindex (\(a1, a2, a3) -> ((a1, a2), a3)) (((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("farmer1", 10, Shirk))) (\((levelAfter1, levelAfter2, levelAfter3, dummy3, dummy2), dummy1) -> (levelAfter1, levelAfter2, levelAfter3, dummy3, dummy2, dummy1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor)))))) >>> (fromFunctions (\((), levelAfter1) -> levelAfter1) (\(levelAfter1, levelAfter2, levelAfter3, dummy3, dummy2) -> ((levelAfter1, levelAfter2, levelAfter3, dummy3, dummy2), ()))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\levelAfter1 -> (levelAfter1, ("farmer2", levelAfter1, Shirk))) (\((levelAfter1, levelAfter2, levelAfter3, dummy3), dummy2) -> (levelAfter1, levelAfter2, levelAfter3, dummy3, dummy2))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor)))))) >>> (fromFunctions (\(levelAfter1, levelAfter2) -> (levelAfter1, levelAfter2)) (\(levelAfter1, levelAfter2, levelAfter3, dummy3) -> ((levelAfter1, levelAfter2, levelAfter3, dummy3), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(levelAfter1, levelAfter2) -> ((levelAfter1, levelAfter2), ("farmer3", levelAfter2, Shirk))) (\((levelAfter1, levelAfter2, levelAfter3), dummy3) -> (levelAfter1, levelAfter2, levelAfter3, dummy3))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor)))))) >>> (fromFunctions (\((levelAfter1, levelAfter2), levelAfter3) -> (levelAfter1, levelAfter2, levelAfter3)) (\(levelAfter1, levelAfter2, levelAfter3) -> ((levelAfter1, levelAfter2, levelAfter3), ()))))))))) >>> (fromLens (\(levelAfter1, levelAfter2, levelAfter3) -> ()) (curry (\((levelAfter1, levelAfter2, levelAfter3), ()) -> (levelAfter1, levelAfter2, levelAfter3)))))

{- Example usage
> OpenGames.Engine.OpticClass.equilibrium irrigationNoMonitoring2 void ((a,()),(a,()),(a,()))
[DiagnosticInfo {player = "farmer1", state = "()", unobservableState = "(((),()),(\"farmer1\",10.0,False))", strategy = "fromFreqs [(Crack,1.0)]", payoff = "2.0", optimalMove = "Flood", optimalPayoff = "5.0"},DiagnosticInfo {player = "farmer2", state = "()", unobservableState = "(((),8.0),(\"farmer2\",8.0,False))", strategy = "fromFreqs [(Crack,1.0)]", payoff = "2.0", optimalMove = "Flood", optimalPayoff = "5.0"},DiagnosticInfo {player = "farmer3", state = "()", unobservableState = "(((),(8.0,6.0)),(\"farmer3\",6.0,False))", strategy = "fromFreqs [(Crack,1.0)]", payoff = "2.0", optimalMove = "Flood", optimalPayoff = "5.0"}]
> let a = Kleisli (\x -> certainly Flood)
> OpenGames.Engine.OpticClass.equilibrium irrigationNoMonitoring2 void ((a,()),(a,()),(a,()))
[]
> OpenGames.Engine.OpticClass.equilibrium irrigationNoMonitoring2 void ((a,()),(a,()),((Kleisli (\x -> certainly Crack)),()))
[]
-}

irrigationMonitor2Src = Block [] []
  [Line Nothing ["\"monitor\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorWater1 + monitorWater2 + monitorWater3 - if monitorWorks == Work then 1 else 0"],
   Line Nothing ["\"farmer1\"", "10", "monitorWorks"] ["monitorWater1"] "irrigationStepMonitor" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "monitorWorks"] ["monitorWater2"] "irrigationStepMonitor" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "monitorWorks"] ["monitorWater3"] "irrigationStepMonitor" ["levelAfter3"] []]
  [] []

irrigationMonitor2 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1) -> ())) >>> (reindex (\(a1, a2, a3, a4) -> (((a1, a2), a3), a4)) ((((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("monitor", [Work, Shirk], ()))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1), monitorWater1 + monitorWater2 + monitorWater3 - if monitorWorks == Work then 1 else 0))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer1", 10, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2), monitorWater1) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor)))))) >>> (fromFunctions (\(monitorWorks, levelAfter1) -> (monitorWorks, levelAfter1)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1) -> ((monitorWorks, levelAfter1), ("farmer2", levelAfter1, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3), monitorWater2) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1), levelAfter2) -> (monitorWorks, levelAfter1, levelAfter2)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2) -> ((monitorWorks, levelAfter1, levelAfter2), ("farmer3", levelAfter2, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), monitorWater3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2), levelAfter3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ()))))))))) >>> (fromLens (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ()) (curry (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)))))

irrigationTesting1Src = Block [] []
  [Line Nothing ["\"farmer\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorWater - if monitorWorks == Work then 1 else 0"],
   Line Nothing ["\"farmer\"", "10", "monitorWorks"] ["monitorWater"] "irrigationStepMonitor" ["endLevel"] []]
  [] []

irrigationTesting1 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, endLevel, monitorWater) -> ())) >>> (reindex (\(a1, a2) -> (a1, a2)) ((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("farmer", [Work, Shirk], ()))) (\((monitorWorks, endLevel, monitorWater), ()) -> (monitorWorks, endLevel, monitorWater))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, endLevel, monitorWater) -> ((monitorWorks, endLevel, monitorWater), monitorWater - if monitorWorks == Work then 1 else 0))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer", 10, monitorWorks))) (\((monitorWorks, endLevel), monitorWater) -> (monitorWorks, endLevel, monitorWater))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor)))))) >>> (fromFunctions (\(monitorWorks, endLevel) -> (monitorWorks, endLevel)) (\(monitorWorks, endLevel) -> ((monitorWorks, endLevel), ()))))))))) >>> (fromLens (\(monitorWorks, endLevel) -> ()) (curry (\((monitorWorks, endLevel), ()) -> (monitorWorks, endLevel)))))

irrigationTesting2Src = Block [] []
  [Line Nothing ["\"monitor\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorWater - if monitorWorks == Work then 1 else 0"],
   Line Nothing ["\"farmer\"", "10", "monitorWorks"] ["monitorWater"] "irrigationStepMonitor" ["endLevel"] []]
  [] []

irrigationTesting2 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, endLevel, monitorWater) -> ())) >>> (reindex (\(a1, a2) -> (a1, a2)) ((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("monitor", [Work, Shirk], ()))) (\((monitorWorks, endLevel, monitorWater), ()) -> (monitorWorks, endLevel, monitorWater))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, endLevel, monitorWater) -> ((monitorWorks, endLevel, monitorWater), monitorWater - if monitorWorks == Work then 1 else 0))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer", 10, monitorWorks))) (\((monitorWorks, endLevel), monitorWater) -> (monitorWorks, endLevel, monitorWater))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor)))))) >>> (fromFunctions (\(monitorWorks, endLevel) -> (monitorWorks, endLevel)) (\(monitorWorks, endLevel) -> ((monitorWorks, endLevel), ()))))))))) >>> (fromLens (\(monitorWorks, endLevel) -> ()) (curry (\((monitorWorks, endLevel), ()) -> (monitorWorks, endLevel)))))

irrigationStepMonitor2Src = Block ["name", "startLevel", "monitorWorks"] ["monitorWater"]
  [Line Nothing ["name", "[Crack, Flood]", "()"] [] "dependentDecision" ["farmerMove"] ["farmerWater"],
   Line Nothing ["startLevel", "farmerMove", "monitorWorks"] ["()"] "fromFunctions assignWater2 id" ["farmerWater", "monitorWater", "downstreamWater"] ["()"]]
  ["downstreamWater"] []

irrigationStepMonitor2 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()) -> monitorWater)) >>> (reindex (\(a1, a2) -> (a1, a2)) ((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(name, startLevel, monitorWorks) -> ((name, startLevel, monitorWorks), (name, [Crack, Flood], ()))) (\((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((name, startLevel, monitorWorks), farmerMove) -> (name, startLevel, monitorWorks, farmerMove)) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()) -> ((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()), farmerWater))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(name, startLevel, monitorWorks, farmerMove) -> ((name, startLevel, monitorWorks, farmerMove), (startLevel, farmerMove, monitorWorks))) (\((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((fromFunctions assignWater2 id)))))) >>> (fromFunctions (\((name, startLevel, monitorWorks, farmerMove), (farmerWater, monitorWater, downstreamWater)) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater)) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater) -> ((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater), ()))))))))) >>> (fromLens (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater) -> downstreamWater) (curry (\((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater)))))

irrigationMonitor3Src = Block [] []
  [Line Nothing ["\"monitor\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorWater1 + monitorWater2 + monitorWater3 - if monitorWorks == Work then 1 else 0"],
   Line Nothing ["\"farmer1\"", "10", "monitorWorks"] ["monitorWater1"] "irrigationStepMonitor2" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "monitorWorks"] ["monitorWater2"] "irrigationStepMonitor2" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "monitorWorks"] ["monitorWater3"] "irrigationStepMonitor2" ["levelAfter3"] []]
  [] []

irrigationMonitor3 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1) -> ())) >>> (reindex (\(a1, a2, a3, a4) -> (((a1, a2), a3), a4)) ((((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("monitor", [Work, Shirk], ()))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1), monitorWater1 + monitorWater2 + monitorWater3 - if monitorWorks == Work then 1 else 0))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer1", 10, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2), monitorWater1) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor2)))))) >>> (fromFunctions (\(monitorWorks, levelAfter1) -> (monitorWorks, levelAfter1)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1) -> ((monitorWorks, levelAfter1), ("farmer2", levelAfter1, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3), monitorWater2) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor2)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1), levelAfter2) -> (monitorWorks, levelAfter1, levelAfter2)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2) -> ((monitorWorks, levelAfter1, levelAfter2), ("farmer3", levelAfter2, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), monitorWater3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor2)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2), levelAfter3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ()))))))))) >>> (fromLens (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ()) (curry (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)))))

irrigationMonitor3Eq a b c d = equilibrium irrigationMonitor3 void (Kleisli (const (certainly a)), (Kleisli (const (certainly b)), ()), (Kleisli (const (certainly c)), ()), (Kleisli (const (certainly d)), ()))

{-
Output with monitorPayRate = 0.2, punishmentRate = 0.7
> irrigationMonitor3Eq Work Crack Crack Crack
[]
> irrigationMonitor3Eq Shirk Flood Flood Flood
[DiagnosticInfo {player = "monitor", state = "()", unobservableState = "((),())", strategy = "fromFreqs [(Shirk,1.0)]", payoff = "0.0", optimalMove = "Work", optimalPayoff = "2.0"}]
> irrigationMonitor3Eq Work Crack Crack Flood
[DiagnosticInfo {player = "farmer3", state = "()", unobservableState = "(((),(Work,8.0,6.0)),(\"farmer3\",6.0,Work))", strategy = "fromFreqs [(Flood,1.0)]", payoff = "0.5000000000000004", optimalMove = "Crack", optimalPayoff = "1.6"}]
> :r
[44 of 44] Compiling OpenGames.Examples.Governance.Irrigation ( /Users/juleshedges/Documents/Code/open-games-hs/src/OpenGames/Examples/Governance/Irrigation.hs, interpreted )
Ok, 44 modules loaded.
> irrigationMonitor3Eq Work Crack Crack Crack
[DiagnosticInfo {player = "monitor", state = "()", unobservableState = "((),())", strategy = "fromFreqs [(Work,1.0)]", payoff = "-0.10000000000000009", optimalMove = "Shirk", optimalPayoff = "0.0"}]
>
-}

irrigationStepMonitor3Src = Block ["name", "startLevel", "monitorWorks"] ["monitorWater"]
  [Line Nothing ["name", "[Crack, Flood]", "()"] [] "dependentDecision" ["farmerMove"] ["farmerWater"],
   Line Nothing ["startLevel", "farmerMove", "monitorWorks"] ["()"] "fromFunctions assignWater3 id" ["farmerWater", "monitorWater", "downstreamWater"] ["()"]]
  ["downstreamWater"] []

irrigationStepMonitor3 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()) -> monitorWater)) >>> (reindex (\(a1, a2) -> (a1, a2)) ((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(name, startLevel, monitorWorks) -> ((name, startLevel, monitorWorks), (name, [Crack, Flood], ()))) (\((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((name, startLevel, monitorWorks), farmerMove) -> (name, startLevel, monitorWorks, farmerMove)) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()) -> ((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()), farmerWater))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(name, startLevel, monitorWorks, farmerMove) -> ((name, startLevel, monitorWorks, farmerMove), (startLevel, farmerMove, monitorWorks))) (\((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater, ()))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((fromFunctions assignWater3 id)))))) >>> (fromFunctions (\((name, startLevel, monitorWorks, farmerMove), (farmerWater, monitorWater, downstreamWater)) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater)) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater) -> ((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater), ()))))))))) >>> (fromLens (\(name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater) -> downstreamWater) (curry (\((name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, monitorWater, downstreamWater)))))

irrigationMonitor4Src = Block [] []
  [Line Nothing ["\"monitor\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorWater1 + monitorWater2 + monitorWater3 - if monitorWorks == Work then 1 else 0"],
   Line Nothing ["\"farmer1\"", "10", "monitorWorks"] ["monitorWater1"] "irrigationStepMonitor3" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "monitorWorks"] ["monitorWater2"] "irrigationStepMonitor3" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "monitorWorks"] ["monitorWater3"] "irrigationStepMonitor3" ["levelAfter3"] []]
  [] []

irrigationMonitor4 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1) -> ())) >>> (reindex (\(a1, a2, a3, a4) -> (((a1, a2), a3), a4)) ((((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("monitor", [Work, Shirk], ()))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1), monitorWater1 + monitorWater2 + monitorWater3 - if monitorWorks == Work then 1 else 0))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer1", 10, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2), monitorWater1) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor3)))))) >>> (fromFunctions (\(monitorWorks, levelAfter1) -> (monitorWorks, levelAfter1)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1) -> ((monitorWorks, levelAfter1), ("farmer2", levelAfter1, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3), monitorWater2) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3, monitorWater2))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor3)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1), levelAfter2) -> (monitorWorks, levelAfter1, levelAfter2)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2) -> ((monitorWorks, levelAfter1, levelAfter2), ("farmer3", levelAfter2, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), monitorWater3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, monitorWater3))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor3)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2), levelAfter3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ()))))))))) >>> (fromLens (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ()) (curry (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)))))

irrigationMonitor4Eq a b c d = equilibrium irrigationMonitor4 void (Kleisli (const (certainly a)), (Kleisli (const (certainly b)), ()), (Kleisli (const (certainly c)), ()), (Kleisli (const (certainly d)), ()))

irrigationMonitor5Src = Block [] []
  [Line Nothing ["\"monitor\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorWater1 + monitorWater2 + monitorWater3 + monitorWater4 - if monitorWorks == Work then 1 else 0"],
   Line Nothing ["\"farmer1\"", "8", "monitorWorks"] ["monitorWater1"] "irrigationStepMonitor2" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "monitorWorks"] ["monitorWater2"] "irrigationStepMonitor2" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "monitorWorks"] ["monitorWater3"] "irrigationStepMonitor2" ["levelAfter3"] [],
   Line Nothing ["\"farmer4\"", "levelAfter3", "monitorWorks"] ["monitorWater4"] "irrigationStepMonitor2" ["levelAfter4"] []]
  [] []

irrigationMonitor5 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1) -> ())) >>> (reindex (\(a1, a2, a3, a4, a5) -> ((((a1, a2), a3), a4), a5)) (((((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("monitor", [Work, Shirk], ()))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1), monitorWater1 + monitorWater2 + monitorWater3 + monitorWater4 - if monitorWorks == Work then 1 else 0))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer1", 8, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2), monitorWater1) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor2)))))) >>> (fromFunctions (\(monitorWorks, levelAfter1) -> (monitorWorks, levelAfter1)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1) -> ((monitorWorks, levelAfter1), ("farmer2", levelAfter1, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3), monitorWater2) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor2)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1), levelAfter2) -> (monitorWorks, levelAfter1, levelAfter2)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2) -> ((monitorWorks, levelAfter1, levelAfter2), ("farmer3", levelAfter2, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4), monitorWater3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor2)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2), levelAfter3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ("farmer4", levelAfter3, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), monitorWater4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor2)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), levelAfter4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()))))))))) >>> (fromLens (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ()) (curry (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)))))

irrigationMonitor5Eq a b c d e = equilibrium irrigationMonitor5 void (Kleisli (const (certainly a)), (Kleisli (const (certainly b)), ()), (Kleisli (const (certainly c)), ()), (Kleisli (const (certainly d)), ()), (Kleisli (const (certainly e)), ()))

{-
Output with monitorPayRate = 0.2, punishmentRate = 0.7
> irrigationMonitor5Eq Work Crack Crack Crack Crack
[]
> irrigationMonitor5Eq Work Crack Crack Crack Flood
[DiagnosticInfo {player = "farmer4", state = "()", unobservableState = "(((),(Work,6.0,4.0,2.0)),(\"farmer4\",2.0,Work))", strategy = "fromFreqs [(Flood,1.0)]", payoff = "0.20000000000000018", optimalMove = "Crack", optimalPayoff = "1.6"}]
> irrigationMonitor5Eq Work Crack Crack Crack Crack
[]
> irrigationMonitor5Eq Shirk Flood Flood Flood Flood
[DiagnosticInfo {player = "monitor", state = "()", unobservableState = "((),())", strategy = "fromFreqs [(Shirk,1.0)]", payoff = "0.0", optimalMove = "Work", optimalPayoff = "2.7"}]
> irrigationMonitor5Eq Work Crack Crack Flood Flood
[DiagnosticInfo {player = "farmer3", state = "()", unobservableState = "(((),(Work,6.0,4.0)),(\"farmer3\",4.0,Work))", strategy = "fromFreqs [(Flood,1.0)]", payoff = "0.40000000000000036", optimalMove = "Crack", optimalPayoff = "1.6"},DiagnosticInfo {player = "farmer4", state = "()", unobservableState = "(((),(Work,6.0,4.0,2.8)),(\"farmer4\",2.8,Work))", strategy = "fromFreqs [(Flood,1.0)]", payoff = "0.28000000000000025", optimalMove = "Crack", optimalPayoff = "1.6"}]
-}

-- Now the monitor is the bottom farmer
irrigationMonitor6Src = Block [] []
  [Line Nothing ["\"farmer4\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorWater1 + monitorWater2 + monitorWater3 + monitorWater4 - if monitorWorks == Work then 1 else 0"],
   Line Nothing ["\"farmer1\"", "8", "monitorWorks"] ["monitorWater1"] "irrigationStepMonitor2" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "monitorWorks"] ["monitorWater2"] "irrigationStepMonitor2" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "monitorWorks"] ["monitorWater3"] "irrigationStepMonitor2" ["levelAfter3"] [],
   Line Nothing ["\"farmer4\"", "levelAfter3", "monitorWorks"] ["monitorWater4"] "irrigationStepMonitor2" ["levelAfter4"] []]
  [] []

irrigationMonitor6 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1) -> ())) >>> (reindex (\(a1, a2, a3, a4, a5) -> ((((a1, a2), a3), a4), a5)) (((((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("farmer4", [Work, Shirk], ()))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1), monitorWater1 + monitorWater2 + monitorWater3 + monitorWater4 - if monitorWorks == Work then 1 else 0))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer1", 8, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2), monitorWater1) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor2)))))) >>> (fromFunctions (\(monitorWorks, levelAfter1) -> (monitorWorks, levelAfter1)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1) -> ((monitorWorks, levelAfter1), ("farmer2", levelAfter1, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3), monitorWater2) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor2)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1), levelAfter2) -> (monitorWorks, levelAfter1, levelAfter2)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2) -> ((monitorWorks, levelAfter1, levelAfter2), ("farmer3", levelAfter2, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4), monitorWater3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor2)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2), levelAfter3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ("farmer4", levelAfter3, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), monitorWater4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor2)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), levelAfter4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()))))))))) >>> (fromLens (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ()) (curry (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)))))

irrigationMonitor6Eq a b c d e = equilibrium irrigationMonitor6 void (Kleisli (const (certainly a)), (Kleisli (const (certainly b)), ()), (Kleisli (const (certainly c)), ()), (Kleisli (const (certainly d)), ()), (Kleisli (const (certainly e)), ()))

{-
Output with monitorPayRate = 0.2, punishmentRate = 0.7
> irrigationMonitor6Eq Work Crack Crack Crack Crack
[]
> irrigationMonitor6Eq Shirk Flood Flood Flood Flood
[DiagnosticInfo {player = "farmer4", state = "()", unobservableState = "((),())", strategy = "fromFreqs [(Shirk,1.0)]", payoff = "0.0", optimalMove = "Work", optimalPayoff = "3.0500000000000007"}]
> irrigationMonitor6Eq Work Crack Crack Crack Flood
[DiagnosticInfo {player = "farmer4", state = "()", unobservableState = "((),())", strategy = "fromFreqs [(Work,1.0)]", payoff = "0.8000000000000003", optimalMove = "Shirk", optimalPayoff = "2.0"},DiagnosticInfo {player = "farmer4", state = "()", unobservableState = "(((),(Work,6.0,4.0,2.0)),(\"farmer4\",2.0,Work))", strategy = "fromFreqs [(Flood,1.0)]", payoff = "0.20000000000000018", optimalMove = "Crack", optimalPayoff = "1.6"}]
-}

-- same as irrigationMonitor6 but using assignWater3 instead of 2
irrigationMonitor7Src = Block [] []
  [Line Nothing ["\"farmer4\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorWater1 + monitorWater2 + monitorWater3 + monitorWater4 - if monitorWorks == Work then 1 else 0"],
   Line Nothing ["\"farmer1\"", "8", "monitorWorks"] ["monitorWater1"] "irrigationStepMonitor3" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "monitorWorks"] ["monitorWater2"] "irrigationStepMonitor3" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "monitorWorks"] ["monitorWater3"] "irrigationStepMonitor3" ["levelAfter3"] [],
   Line Nothing ["\"farmer4\"", "levelAfter3", "monitorWorks"] ["monitorWater4"] "irrigationStepMonitor3" ["levelAfter4"] []]
  [] []

irrigationMonitor7 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1) -> ())) >>> (reindex (\(a1, a2, a3, a4, a5) -> ((((a1, a2), a3), a4), a5)) (((((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("farmer4", [Work, Shirk], ()))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1), monitorWater1 + monitorWater2 + monitorWater3 + monitorWater4 - if monitorWorks == Work then 1 else 0))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer1", 8, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2), monitorWater1) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor3)))))) >>> (fromFunctions (\(monitorWorks, levelAfter1) -> (monitorWorks, levelAfter1)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1) -> ((monitorWorks, levelAfter1), ("farmer2", levelAfter1, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3), monitorWater2) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor3)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1), levelAfter2) -> (monitorWorks, levelAfter1, levelAfter2)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2) -> ((monitorWorks, levelAfter1, levelAfter2), ("farmer3", levelAfter2, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4), monitorWater3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor3)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2), levelAfter3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ("farmer4", levelAfter3, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), monitorWater4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor3)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), levelAfter4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()))))))))) >>> (fromLens (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ()) (curry (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)))))

irrigationMonitor7Eq a b c d e = equilibrium irrigationMonitor7 void (Kleisli (const (certainly a)), (Kleisli (const (certainly b)), ()), (Kleisli (const (certainly c)), ()), (Kleisli (const (certainly d)), ()), (Kleisli (const (certainly e)), ()))

{- Example usage
> irrigationMonitor7Eq Work Crack Crack Crack Crack
[]
> irrigationMonitor7Eq Shirk Flood Flood Flood Flood
[DiagnosticInfo {player = "farmer4", state = "()", unobservableState = "((),())", strategy = "fromFreqs [(Shirk,1.0)]", payoff = "0.0", optimalMove = "Work", optimalPayoff = "6.199999999999999"}]
> irrigationMonitor7Eq Work Crack Crack Crack Flood
[DiagnosticInfo {player = "farmer4", state = "()", unobservableState = "(((),(Work,6.0,4.0,2.0)),(\"farmer4\",2.0,Work))", strategy = "fromFreqs [(Flood,1.0)]", payoff = "0.20000000000000018", optimalMove = "Crack", optimalPayoff = "1.6"}]
> irrigationMonitor7Eq Work Flood Crack Crack Crack
[DiagnosticInfo {player = "farmer1", state = "()", unobservableState = "(((),Work),(\"farmer1\",8.0,Work))", strategy = "fromFreqs [(Flood,1.0)]", payoff = "0.5000000000000004", optimalMove = "Crack", optimalPayoff = "1.6"}]
-}

{- Brute force search for pure equilibria:
> filter (\(a,b,c,d,e) -> null (irrigationMonitor7Eq a b c d e)) [(a,b,c,d,e) | a <- [Work,Shirk], b <- [Crack,Flood], c <- [Crack,Flood], d <- [Crack,Flood], e <- [Crack,Flood]]
[(Work,Crack,Crack,Crack,Crack)]
> filter (\(a,b,c,d,e) -> null (irrigationMonitor6Eq a b c d e)) [(a,b,c,d,e) | a <- [Work,Shirk], b <- [Crack,Flood], c <- [Crack,Flood], d <- [Crack,Flood], e <- [Crack,Flood]]
[(Work,Crack,Crack,Crack,Crack)]
> filter (\(a,b,c,d,e) -> null (irrigationMonitor5Eq a b c d e)) [(a,b,c,d,e) | a <- [Work,Shirk], b <- [Crack,Flood], c <- [Crack,Flood], d <- [Crack,Flood], e <- [Crack,Flood]]
[(Work,Crack,Crack,Crack,Crack)]
> filter (\(a,b,c,d) -> null (irrigationMonitor4Eq a b c d)) [(a,b,c,d) | a <- [Work,Shirk], b <- [Crack,Flood], c <- [Crack,Flood], d <- [Crack,Flood]]
[(Work,Crack,Crack,Crack)]
-}

-- same as irrigationMonitor7 but farmer1 instead of farmer4 is the monitor
irrigationMonitor8Src = Block [] []
  [Line Nothing ["\"farmer1\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorWater1 + monitorWater2 + monitorWater3 + monitorWater4 - if monitorWorks == Work then 1 else 0"],
   Line Nothing ["\"farmer1\"", "8", "monitorWorks"] ["monitorWater1"] "irrigationStepMonitor2" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "monitorWorks"] ["monitorWater2"] "irrigationStepMonitor2" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "monitorWorks"] ["monitorWater3"] "irrigationStepMonitor2" ["levelAfter3"] [],
   Line Nothing ["\"farmer4\"", "levelAfter3", "monitorWorks"] ["monitorWater4"] "irrigationStepMonitor2" ["levelAfter4"] []]
  [] []

irrigationMonitor8 = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1) -> ())) >>> (reindex (\(a1, a2, a3, a4, a5) -> ((((a1, a2), a3), a4), a5)) (((((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("farmer1", [Work, Shirk], ()))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1), monitorWater1 + monitorWater2 + monitorWater3 + monitorWater4 - if monitorWorks == Work then 1 else 0))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer1", 8, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2), monitorWater1) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2, monitorWater1))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor3)))))) >>> (fromFunctions (\(monitorWorks, levelAfter1) -> (monitorWorks, levelAfter1)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1) -> ((monitorWorks, levelAfter1), ("farmer2", levelAfter1, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3), monitorWater2) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3, monitorWater2))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor3)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1), levelAfter2) -> (monitorWorks, levelAfter1, levelAfter2)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2) -> ((monitorWorks, levelAfter1, levelAfter2), ("farmer3", levelAfter2, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4), monitorWater3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4, monitorWater3))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor3)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2), levelAfter3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ("farmer4", levelAfter3, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), monitorWater4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4, monitorWater4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitor3)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), levelAfter4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()))))))))) >>> (fromLens (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ()) (curry (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)))))

irrigationMonitor8Eq a b c d e = equilibrium irrigationMonitor8 void (Kleisli (const (certainly a)), (Kleisli (const (certainly b)), ()), (Kleisli (const (certainly c)), ()), (Kleisli (const (certainly d)), ()), (Kleisli (const (certainly e)), ()))

{- Example usage
> filter (\(a,b,c,d,e) -> null (irrigationMonitor8Eq a b c d e)) [(a,b,c,d,e) | a <- [Work,Shirk], b <- [Crack,Flood], c <- [Crack,Flood], d <- [Crack,Flood], e <- [Crack,Flood]]
[(Work,Crack,Crack,Crack,Crack)]
-}
-- It would be more interesting to balance the parameters so that this is *not* an equilibrium
-- We would like a socially optimal equilibrium when the monitor farms the bottom plot, and not otherwise

assignWaterNoTax :: (Double, FarmerMove, MonitorMove) -> (Double, Double)
assignWaterNoTax (startLevel, farmerMove, monitorWorks)
  = case (farmerMove, monitorWorks) of
      (Crack, Work) -> (yield, startLevel - yield)
      (Flood, Work) -> ((1 - punishmentRate)*yield, startLevel - (1 - punishmentRate)*yield)
      (_, Shirk) -> (yield, startLevel - yield)
  where yield = farmerWater startLevel farmerMove
        punishmentRate = 0.65 -- this shadows the punishment rate at file level

irrigationStepMonitorNoTaxSrc = Block ["name", "startLevel", "monitorWorks"] []
    [Line Nothing ["name", "[Crack, Flood]", "()"] [] "dependentDecision" ["farmerMove"] ["farmerWater"],
     Line Nothing ["startLevel", "farmerMove", "monitorWorks"] ["()"] "fromFunctions assignWaterNoTax id" ["farmerWater", "downstreamWater"] ["()"]]
    ["downstreamWater"] []

irrigationStepMonitorNoTax = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater, ()) -> ())) >>> (reindex (\(a1, a2) -> (a1, a2)) ((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(name, startLevel, monitorWorks) -> ((name, startLevel, monitorWorks), (name, [Crack, Flood], ()))) (\((name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater, ()), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater, ()))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((name, startLevel, monitorWorks), farmerMove) -> (name, startLevel, monitorWorks, farmerMove)) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater, ()) -> ((name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater, ()), farmerWater))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(name, startLevel, monitorWorks, farmerMove) -> ((name, startLevel, monitorWorks, farmerMove), (startLevel, farmerMove, monitorWorks))) (\((name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater, ()))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((fromFunctions assignWaterNoTax id)))))) >>> (fromFunctions (\((name, startLevel, monitorWorks, farmerMove), (farmerWater, downstreamWater)) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater)) (\(name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater) -> ((name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater), ()))))))))) >>> (fromLens (\(name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater) -> downstreamWater) (curry (\((name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater), ()) -> (name, startLevel, monitorWorks, farmerMove, farmerWater, downstreamWater)))))


-- Monitor payoff given posible _wage_ for working, possible _punishment_ for not working, given _costs_ of working
monitorPayoff :: Double -> Double -> Double -> MonitorMove -> Double
monitorPayoff wage _   c Work  =  wage - c
monitorPayoff _    pun c Shirk = - pun



irrigationMonitor9Src = Block [] []
  [Line Nothing ["\"farmer4\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorPayoff wage pun c monitorWorks"],
   Line Nothing ["\"farmer1\"", "9", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter3"] [],
   Line Nothing ["\"farmer4\"", "levelAfter3", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter4"] []]
  [] []

irrigationMonitor9 wage pun c =  reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ())) >>> (reindex (\(a1, a2, a3, a4, a5) -> ((((a1, a2), a3), a4), a5)) (((((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("farmer4", [Work, Shirk], ()))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), monitorPayoff wage pun c monitorWorks))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer1", 9, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\(monitorWorks, levelAfter1) -> (monitorWorks, levelAfter1)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1) -> ((monitorWorks, levelAfter1), ("farmer2", levelAfter1, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1), levelAfter2) -> (monitorWorks, levelAfter1, levelAfter2)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2) -> ((monitorWorks, levelAfter1, levelAfter2), ("farmer3", levelAfter2, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2), levelAfter3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ("farmer4", levelAfter3, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), levelAfter4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()))))))))) >>> (fromLens (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ()) (curry (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)))))

irrigationMonitor9Eq a b c d e wage pun cost = equilibrium (irrigationMonitor9 wage pun cost) void (Kleisli (const (certainly a)), (Kleisli (const (certainly b)), ()), (Kleisli (const (certainly c)), ()), (Kleisli (const (certainly d)), ()), (Kleisli (const (certainly e)), ()))

irrigationMonitor10Src = Block [] []
  [Line Nothing ["\"farmer1\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorPayoff wage pun c monitorWorks"],
   Line Nothing ["\"farmer1\"", "9", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter3"] [],
   Line Nothing ["\"farmer4\"", "levelAfter3", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter4"] []]
  [] []

irrigationMonitor10 wage pun c = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ())) >>> (reindex (\(a1, a2, a3, a4, a5) -> ((((a1, a2), a3), a4), a5)) (((((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("farmer1", [Work, Shirk], ()))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), monitorPayoff wage pun c monitorWorks))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer1", 9, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\(monitorWorks, levelAfter1) -> (monitorWorks, levelAfter1)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1) -> ((monitorWorks, levelAfter1), ("farmer2", levelAfter1, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1), levelAfter2) -> (monitorWorks, levelAfter1, levelAfter2)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2) -> ((monitorWorks, levelAfter1, levelAfter2), ("farmer3", levelAfter2, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2), levelAfter3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ("farmer4", levelAfter3, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), levelAfter4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()))))))))) >>> (fromLens (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ()) (curry (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)))))

irrigationMonitor10Eq a b c d e wage pun costs = equilibrium (irrigationMonitor10 wage pun costs) void (Kleisli (const (certainly a)), (Kleisli (const (certainly b)), ()), (Kleisli (const (certainly c)), ()), (Kleisli (const (certainly d)), ()), (Kleisli (const (certainly e)), ()))

{-
-- 0 Output with no punishment and transfer

>irrigationMonitor9Eq Work Crack Crack Crack Crack 0 0 0
[]

-- same holds for 10

>irrigationMonitor10Eq Work Crack Crack Crack Crack 0 0 0
[]

-- reason is that the incentive effects are binary; in case of cracking both prefer to crack (if punishment was lower that would not be an eq)


-- 1 Note, however the following difference between 9 and 10

>irrigationMonitor10Eq Shirk Flood Flood Crack Crack 0 0 0
[]

--This is not an eq under 9
>irrigationMonitor9Eq Shirk Flood Flood Crack Crack 0 0 0
[DiagnosticInfo {player = "farmer4", state = "()", unobservableState = "((),())", strategy = "fromFreqs [(Shirk,1.0)]", payoff = "0.0", optimalMove = "Work", optimalPayoff = "2.0"}]

--Also note, the following is also not an equilibrium. So, there is a difference in the positioning of the monitor.

>irrigationMonitor9Eq Work Crack Crack Crack Flood 0 0 0
[DiagnosticInfo {player = "farmer4", state = "()", unobservableState = "((),())", strategy = "fromFreqs [(Work,1.0)]", payoff = "1.0499999999999998", optimalMove = "Shirk", optimalPayoff = "3.0"},DiagnosticInfo {player = "farmer4", state = "()", unobservableState = "(((),(Work,7.0,5.0,3.0)),(\"farmer4\",3.0,Work))", strategy = "fromFreqs [(Flood,1.0)]", payoff = "1.0499999999999998", optimalMove = "Crack", optimalPayoff = "2.0"}]
>irrigationMonitor9Eq Shirk Crack Crack Crack Flood 0 0 0
[DiagnosticInfo {player = "farmer1", state = "()", unobservableState = "(((),Shirk),(\"farmer1\",9.0,Shirk))", strategy = "fromFreqs [(Crack,1.0)]", payoff = "2.0", optimalMove = "Flood", optimalPayoff = "5.0"},DiagnosticInfo {player = "farmer2", state = "()", unobservableState = "(((),(Shirk,7.0)),(\"farmer2\",7.0,Shirk))", strategy = "fromFreqs [(Crack,1.0)]", payoff = "2.0", optimalMove = "Flood", optimalPayoff = "5.0"},DiagnosticInfo {player = "farmer3", state = "()", unobservableState = "(((),(Shirk,7.0,5.0)),(\"farmer3\",5.0,Shirk))", strategy = "fromFreqs [(Crack,1.0)]", payoff = "2.0", optimalMove = "Flood", optimalPayoff = "5.0"}]
>

-- 2 In its current form, the only way to get rid of the equilibrium in 0 is to have a wage/cost differential. Within that there are multiple ways of doing it, of course. Example:

>irrigationMonitor10Eq Work Crack Crack Crack Crack 0.1 0 0.2
[DiagnosticInfo {player = "farmer1", state = "()", unobservableState = "((),())", strategy = "fromFreqs [(Work,1.0)]", payoff = "1.9", optimalMove = "Shirk", optimalPayoff = "2.0"}]
>irrigationMonitor9Eq Work Crack Crack Crack Crack 0.2 0 0.2
[]

-}

irrigationFarmer1Monitor = irrigationMonitor10 0 0 0
irrigationFarmer4Monitor = irrigationMonitor9 0 0 0

irrigationFarmer2MonitorSrc = Block [] []
  [Line Nothing ["\"farmer2\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorPayoff 0 0 0 monitorWorks"],
   Line Nothing ["\"farmer1\"", "9", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter3"] [],
   Line Nothing ["\"farmer4\"", "levelAfter3", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter4"] []]
  [] []

irrigationFarmer2Monitor = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ())) >>> (reindex (\(a1, a2, a3, a4, a5) -> ((((a1, a2), a3), a4), a5)) (((((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("farmer2", [Work, Shirk], ()))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), monitorPayoff 0 0 0 monitorWorks))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer1", 9, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\(monitorWorks, levelAfter1) -> (monitorWorks, levelAfter1)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1) -> ((monitorWorks, levelAfter1), ("farmer2", levelAfter1, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1), levelAfter2) -> (monitorWorks, levelAfter1, levelAfter2)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2) -> ((monitorWorks, levelAfter1, levelAfter2), ("farmer3", levelAfter2, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2), levelAfter3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ("farmer4", levelAfter3, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), levelAfter4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()))))))))) >>> (fromLens (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ()) (curry (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)))))

irrigationFarmer3MonitorSrc = Block [] []
  [Line Nothing ["\"farmer3\"", "[Work, Shirk]", "()"] [] "dependentDecision" ["monitorWorks"] ["monitorPayoff 0 0 0 monitorWorks"],
   Line Nothing ["\"farmer1\"", "9", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter1"] [],
   Line Nothing ["\"farmer2\"", "levelAfter1", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter2"] [],
   Line Nothing ["\"farmer3\"", "levelAfter2", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter3"] [],
   Line Nothing ["\"farmer4\"", "levelAfter3", "monitorWorks"] [] "irrigationStepMonitorNoTax" ["levelAfter4"] []]
  [] []

irrigationFarmer3Monitor = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ())) >>> (reindex (\(a1, a2, a3, a4, a5) -> ((((a1, a2), a3), a4), a5)) (((((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ("farmer3", [Work, Shirk], ()))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((dependentDecision)))))) >>> (fromFunctions (\((), monitorWorks) -> monitorWorks) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), monitorPayoff 0 0 0 monitorWorks))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\monitorWorks -> (monitorWorks, ("farmer1", 9, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\(monitorWorks, levelAfter1) -> (monitorWorks, levelAfter1)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1) -> ((monitorWorks, levelAfter1), ("farmer2", levelAfter1, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1), levelAfter2) -> (monitorWorks, levelAfter1, levelAfter2)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2) -> ((monitorWorks, levelAfter1, levelAfter2), ("farmer3", levelAfter2, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2), levelAfter3) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ())))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3), ("farmer4", levelAfter3, monitorWorks))) (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationStepMonitorNoTax)))))) >>> (fromFunctions (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3), levelAfter4) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)) (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()))))))))) >>> (fromLens (\(monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4) -> ()) (curry (\((monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4), ()) -> (monitorWorks, levelAfter1, levelAfter2, levelAfter3, levelAfter4)))))

irrigationRotatingMonitorSrc = Block [] []
  [Line Nothing [] [] "nature (uniform [Left (Left (Left ())), Left (Left (Right ())), Left (Right ()), Right ()])" ["switch"] [],
   Line Nothing ["switch"] [] "irrigationFarmer1Monitor +++ irrigationFarmer2Monitor +++ irrigationFarmer3Monitor +++ irrigationFarmer4Monitor" ["discard"] []]
  [] []

irrigationRotatingMonitor = reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\(switch, discard) -> ())) >>> (reindex (\(a1, a2) -> (a1, a2)) ((reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\() -> ((), ())) (\((switch, discard), ()) -> (switch, discard))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((nature (uniform [Left (Left (Left ())), Left (Left (Right ())), Left (Right ()), Right ()]))))))) >>> (fromFunctions (\((), switch) -> switch) (\(switch, discard) -> ((switch, discard), ()))))) >>> (reindex (\x -> (x, ())) ((reindex (\x -> ((), x)) ((fromFunctions (\switch -> (switch, switch)) (\((switch, discard), ()) -> (switch, discard))) >>> (reindex (\x -> ((), x)) ((fromFunctions (\x -> x) (\x -> x)) &&& ((irrigationFarmer1Monitor +++ irrigationFarmer2Monitor +++ irrigationFarmer3Monitor +++ irrigationFarmer4Monitor)))))) >>> (fromFunctions (\(switch, discard) -> (switch, discard)) (\(switch, discard) -> ((switch, discard), ()))))))))) >>> (fromLens (\(switch, discard) -> ()) (curry (\((switch, discard), ()) -> (switch, discard)))))

rotatingStrategy :: (Kleisli Stochastic () MonitorMove,
                     (Kleisli Stochastic () FarmerMove, ()),
                     (Kleisli Stochastic () FarmerMove, ()),
                     (Kleisli Stochastic () FarmerMove, ()),
                     (Kleisli Stochastic () FarmerMove, ()))
rotatingStrategy = (Kleisli (const (certainly Work)),
                    (Kleisli (const (certainly Crack)), ()),
                    (Kleisli (const (certainly Crack)), ()),
                    (Kleisli (const (certainly Crack)), ()),
                    (Kleisli (const (certainly Crack)), ()))

{- Example usage
> OpenGames.Engine.OpticClass.equilibrium irrigationRotatingMonitor void ((), (((rotatingStrategy, rotatingStrategy), rotatingStrategy), rotatingStrategy))
[]
-}

-- Next step: Monitor is given the bottom plot. Farmer4 goes away. Use roleDecision instead of +++
